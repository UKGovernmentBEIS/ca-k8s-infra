apiVersion: batch/v1
kind: Job
metadata:
  name: honeypot-setup
spec:
  template:
    spec:
      containers:
        - name: honeypot-setup
          image: localhost:5001/job:{% raw %}{{ .Values.environment }}{% endraw %}
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              # Configure MinIO client
              mc alias set myminio http://minio.minio-internal-{{ .Values.environment }}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
              
              # Create strategic honeypot files
              echo '{"aws_key": "AKIA0EXAMPLEEXAMPLE", "aws_secret": "examplesecrethoneypotvaluedonotuse12345"}' > /tmp/aws-credentials.json
              
              # Place honeypot files in strategic locations
              mc mb myminio/models/.credentials --ignore-existing
              mc cp /tmp/aws-credentials.json myminio/models/.credentials/aws-credentials.json
              
              # Create a team-confidential folder (appears legitimate but is actually a honeypot)
              mc mb myminio/datasets/team-confidential --ignore-existing
              echo '{"customer_data": "sample"}' > /tmp/customer-data.json
              mc cp /tmp/customer-data.json myminio/datasets/team-confidential/customer-data.json
              
              # Setup webhook for notifications
              mc admin config set myminio notify_webhook endpoint=http://honeypot-monitor:8080/alert
              mc admin service restart myminio
              
              # Wait for MinIO to restart
              sleep 5
              
              # Configure event notifications for honeypot files
              mc event add myminio/models/.credentials arn:minio:sqs::1:webhook --event get,put,delete
              mc event add myminio/datasets/team-confidential arn:minio:sqs::1:webhook --event get,put,delete
              
              echo "Honeypot setup complete"
          env:
    {% if cookiecutter.external_secrets %}
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: minio-username
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: minio-password
    {% else %}
            - name: MINIO_ACCESS_KEY
              value: "minioadmin"
            - name: MINIO_SECRET_KEY
              value: "minioadmin"
    {% endif %}
            - name: ENVIRONMENT
              value: {% raw %}{{ .Values.environment }}{% endraw %}
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 300
